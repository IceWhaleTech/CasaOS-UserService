// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Access_tokenScopes = "access_token.Scopes"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Message Error message
	Message *string `json:"message,omitempty"`
}

// Event defines model for Event.
type Event struct {
	// EventUuid UUID of the event
	EventUuid *openapi_types.UUID `json:"event_uuid,omitempty"`

	// Name event name
	Name string `json:"name"`

	// Properties event properties
	Properties []Property `json:"properties"`

	// SourceID associated source id
	SourceID string `json:"sourceID"`

	// Timestamp timestamp this event took place
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// Property defines model for Property.
type Property struct {
	// Name Name of the property
	Name *string `json:"name,omitempty"`

	// Value Value of the property
	Value *string `json:"value,omitempty"`
}

// EventUuid defines model for event_uuid.
type EventUuid = openapi_types.UUID

// BadResponse defines model for BadResponse.
type BadResponse = BaseResponse

// DeleteEventOK defines model for DeleteEventOK.
type DeleteEventOK = Event

// ResponseNotFound defines model for ResponseNotFound.
type ResponseNotFound = BaseResponse

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	// Form Form of the events to get
	Form *time.Time `form:"form,omitempty" json:"form,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete an event
	// (DELETE /event/{event_uuid})
	DeleteEvent(ctx echo.Context, eventUuid EventUuid) error
	// Get all events
	// (GET /events)
	GetEvents(ctx echo.Context, params GetEventsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteEvent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event_uuid" -------------
	var eventUuid EventUuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "event_uuid", runtime.ParamLocationPath, ctx.Param("event_uuid"), &eventUuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_uuid: %s", err))
	}

	ctx.Set(Access_tokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEvent(ctx, eventUuid)
	return err
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams
	// ------------- Optional query parameter "form" -------------

	err = runtime.BindQueryParameter("form", true, false, "form", ctx.QueryParams(), &params.Form)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter form: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEvents(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/event/:event_uuid", wrapper.DeleteEvent)
	router.GET(baseURL+"/events", wrapper.GetEvents)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXbW/bNhD+KwS3DxsgWbKjpK2AfmibtAgKpMXSbsDiwDiTZ5uNRKokldQ19N8HUrIk",
	"2zKSbR0WGIjpe+Xdcy/cUKbyQkmU1tB0QwvQkKNF7U94j9LOylJwd+JomBaFFUrSlH7+fHlO1ILYFRLP",
	"R6wiS7Q0oMLRC7ArGlAJOdK0rymgGr+WQiOnqdUlBtSwFebgDX6DvMicwHhygsnp2bMQn7+Yh+MJPwkh",
	"OT0Lk8nZ2elpksRxHNOALpTOwdKUNqrtunDSxmohl7SqKmfNFEoa9Dd6Dfy35uyOTEmL0rqvUBSZYOBu",
	"F30x7oqbnmM/a1zQlP4UdeGKaqqJXoPBVqk3uRup18CJuzIaS6uAnmOGFi9cQD68/2FOeH1D1j2BcG+U",
	"O/tbV6+UfatKyZ/gQpuWDc3RGFi6GF8pS2oFVfCDItVT2eps0tYTdDDVqkBtRZ3U1qd9jF5orTTZkoMe",
	"vPo5cRAB/kFm6y0g91HU/qLmX5D5LNbxPnDlb1XM4/jd1s++qrrgPK1/q0wxyEJjlYYlplyYuxQ4x0HF",
	"u34Pqe9x9IzcbLY1vWvtHiVXmgb0HrLSka9BngtzR6vgiESuOGY9gTe6/I76OH8Toi17kkwwxtN5+IKf",
	"YJgs8Hk4T84W4QuWjJPxgiPjz/rKGBhQJixF6mPRKZLKikUD+dDYdYbh5IigsFlf8gofiIsyWTR1MCAj",
	"mJLhuCfUkPzvfC9AnVgD2h3JV0Q2BgPSRJfUQQuIMMSnekSr24AKi7l5rBo/1vld0w7foDX4s1GlZnh5",
	"fogNMEYxARY5qZmIz8oREA4hz4ocjYW8OFTekohdCdPOFXVHigwY9guGg8XQ8dOheu1GzE13l6aadrB/",
	"O1DbbWAOynu4Gq8gx21hF1vZgYs3edwX/939/Lj8YRdyeUJWamHX1y6ntY/AGBozs+oOffP203iFwFF3",
	"8/hVaVdKi+8e9J0tKMR7XNetWciFOnR2WsbxCSsEs6VGf8CpJO6vpjSYyJELeDmlvxQaF6hNyFSmdOih",
	"hynhoO9+nVJiNDNoX07pytrCpFGk4WG0FHZVzkuDuhlLI6by6JLhHyvI8BOyVZSppYpyEDKqK6b5N5uD",
	"lKhnTv1MiuXKzp7HcfFtVMjllP5jbzOn6T901z4Ib2I2z0p8xGORLwlkzoc3YODDde3V/+BS7U60j4RP",
	"rm6F8Vh+9fGSLJT239949eSzQU2uUd8LhqOpJJfWMZcGuVsfc5CwRHfUhoDkTlJoUiPaMTRaTK3AjKYe",
	"u74rp3TAhHPBNVDUpobvvevsVBUooRA0pSejeHTiOgLYla+eyPecaNMN8qouArc/HZZDvcwRkO1Ed+Xr",
	"q+qSt/SLhtbfrm+Gm3PHEvV2CdfTd/bYSRwfa+8tX7S7aVYBTeLxwJJU7xLKtlOMJnHyuPaDPbIK6OlT",
	"3Orv4L6HlXkOej0YTQtLF6t6I6G3jr2Oi4+Ce24c3OcdWgJZRhq2/Yy8Q3uxpezlY1fPW6XznXXN7L1w",
	"vpao111LdZOJDj9mJvFkHMbu8ymOU//586mz7Ejmn/xoeNIq0Lwe9veAI68J0yHlXyb8IFcH+e7NOJ+j",
	"3el2c+vi49rBcA6Pt4RSZzSl0f0k8t3GV1hjfLhANGZ+6WnRZPZet7S6rf4KAAD//1AxCqFPDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
